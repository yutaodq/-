构建流式应用―RxJS详解
https://github.com/joeyguo/blog/issues/11

Observable其实就是可观测数据流（stream）， 流是在时间流逝的过程中产生的一系列事件。
它具有时间与事件响应的概念。

我们可以把一切输入都当做数据流来处理，比如说：

    用户操作 网络响应   定时器   Worker


RxJS 的观察者 + 迭代器模式
RxJS 中含有两个基本概念：Observables 与 Observer。

Observables 作为被观察者，是一个值或事件的流集合；
而 Observer 则作为观察者，根据 Observables 进行处理。
Observables 与 Observer 之间的订阅发布关系(观察者模式) 如下：

订阅：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。
发布：Observable 通过回调 next 方法向 Observer 发布事件。


下面为 Observable 与 Observer 的伪代码

// Observer
var Observer = {
    next(value) {
        alert(`收到${value}`);
    }
};

// Observable
function Observable (Observer) {
    setTimeout(()=>{
        Observer.next('A');
    },1000)
}

// subscribe
Observable(Observer);

/********
高阶 Observables

   一个 Observable 对象可以发出任何类型的值：数值、字符串、对象等等。
这意味着 Observable 对象也可以发出 Observable 类型的值。

与 JavaScript 高阶函数类似，一个高阶的 Observable 表示
一个 Observable 对象内部会返回另一个 Observable 对象。
此时我们来更新一下上面的示例，以便更加直观的了解上述概念：

const button = document.querySelector('button');

const click$ = fromEvent(button, 'click');
const interval$ = interval(1000);

const clicksToInterval$ = click$.pipe(map(event => {
  return interval$;
}));

clicksToInterval$.subscribe(intervalObservable => 
  console.log(intervalObservable)
);

当用户点击按钮时，我们的 map 操作符将返回一个 interval observable 对象。
当我们订阅 clicksToInterval$ 对象时，将发出 intervalObservable 对象。

在你订阅 clicksToInterval$ 对象时，控制台输出的是 intervalObservable 对象。
这里需要记住的是，observable 对象是 lazy 的，如果想要从一个 observable 对象中获取值，
你必须执行订阅操作，比如：

clicksToInterval$.subscribe(intervalObservable => {
   intervalObservable.subscribe(num => {
     console.log(num);
   });
});

在介绍高阶 observable 对象的概念之后，接下来让我们来介绍两个有用的操作符，
用来帮助我们解决上面提到的问题。

//***  mergeAll

mergeAll() 操作符底层做的操作跟上面的例子一样，它获取 inner(内部) observable 对象，
执行订阅操作，然后把值推给 observer （观察者）对象。

const click$ = fromEvent(button, 'click');
const interval$ = interval(1000);

const observable$ = click$.pipe(map(event => { 
   return interval$;
}));

observable$.mergeAll().subscribe(num => console.log(num));

在上面的示例中，source(源) observable 对象是 clicks$ observable 对象，
而 inner(内部) observable 对象是 interval$ observable 对象。

在 RxJS 中这是一个通用的模式，因此有一个快捷方式来实现相同的行为 ―― mergeMap()：

mergeMap() <=> map() + mergeAll()


const button = document.querySelector('button');

const click$ = fromEvent(button, 'click');
const interval$ = interval(1000);

const observable$ = click$.pipe(mergeMap(event => {
  return interval$;
}));

observable$.subscribe(num => console.log(num));
在上面的代码中，每当我们点击按钮，我们都会调用 interval$ 对象的 subscribe() 方法，
这将导致在我们的页面中会存在多个独立的定时器。如果这是你期望实现的功能，那就没问题。
但如果你只想保持一个数据源，你就需要使用 switch() 操作符。

// *** switch

switch() 用于取消前一个订阅，并切换至新的订阅。
如果我们把代码更新为 switch() 操作符，当我们多次点击按钮时，
我们可以看到每次点击按钮时，我们将获取新的 interval 对象，
而上一个 interval 对象将会被自动取消。


const button = document.querySelector('button');

const click$ = fromEvent(button, 'click');
const interval$ = interval(1000);

const observable$ = click$.pipe(
  map(event => {
    return interval$;
  }),
  switchAll()
);

observable$.subscribe(num => console.log(num));
正如你说看到的，当点击三次按钮后，我们仅有一个 interval 对象。
反之，使用 merge() 操作符，我们会有三个独立的 interval 对象。
当源发出新值后，switch 操作符会对上一个内部的订阅对象执行取消订阅操作。

在 RxJS 中这也是一个通用的模式，因此也有一个快捷方式来实现相同的行为 ――
// ***  switchMap()：

switchMap() <=> map() + switch()

const button = document.querySelector('button');

const click$ = fromEvent(button, 'click');
const interval$ = interval(1000);

const observable$ = click$.pipe(
  switchMap(event => {
    return interval$;
  })
);

observable$.subscribe(num => console.log(num));
感兴趣的同学可以查看 Stackblitz 完整示例。