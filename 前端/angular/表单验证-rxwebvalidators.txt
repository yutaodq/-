*** 项目
https://github.com/rxweb/rxweb/tree/master/client-side/angular/packages/reactive-form-validators#readme

https://indepth.dev/posts/1310/creating-elegant-reactive-forms-with-rxwebvalidators

yarn add @rxweb/reactive-form-validators

### 用例：

 1 - 我们想比较两个FormControl值，FormControl如果控制值不同，则将其标记为无效。
 
 let userForm =new FormGroup({
    password:new FormControl(), 
    confirmPassword:new FormControl('', RxwebValidators.compare({fieldName:'password' })),
});

根据上面的代码，我们compare在'comparePassword'上使用了验证器FormControl。每当“ password”或“ comparePassword”的值FormControl更改时，验证器就会触发。通过这种方法，我们的代码更具可读性。

### 条件验证

用例：选中通知复选框后，“电话”字段为必填字段。

 let userForm = new FormGroup({
     notification:new FormControl(), 
     phone:new FormControl('', RxwebValidators.required({conditionalExpression:x => x.notification === true }))
});

通过使用conditionalExpression，FormControl仅当notification FormControl值是“ true”时才需要“ phone” 。使用上述方法，代码更易于理解和维护。

### 基于价值的按需验证
用例：优质产品费用，购买价格和转售价三个字段。该转售价格必须至少30％，超过购买价格加上优质的产品收费：

this.userInfoFormGroup = new FormGroup({
          premiumCharge:new FormControl(),
            purchasePrice:new FormControl(), 
           resalePrice: new FormControl('', RxwebValidators.minNumber({
            dynamicConfig: (x, y) => {
                const minimumPrice = ((x.purchasePrice + x.premiumCharge) * 30 / 100);
                  return { value: minimumPrice };
              }
             })) 
            
        });
        
通过这种方法，我们可以扩展代码范围。我们不需要订阅每个值的更改，FormControl因为库会自动处理依赖验证业务计算FormControls。

        