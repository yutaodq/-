import { Component, ViewChild } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { AllModules } from "@ag-grid-enterprise/all-modules";
import "@ag-grid-community/all-modules/dist/styles/ag-grid.css";
import "@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css";

@Component({
  selector: "my-app",
  template: `
    <div>
      <span class="button-group">
        <button (click)="saveFilterModel()">Save Filter Model</button>
        <button (click)="restoreFilterModel()">Restore from Save</button>
        <button (click)="clearFilters()">Clear Filters</button>
      </span>
    </div>
    <div>
      <span>
        <button (click)="restoreFromHardCoded()">
          Name = 'Mich%', Country = ['Ireland', 'United States'], Age &lt; 30, Date &lt; 01/01/2010
        </button>
      </span>
    </div>
    <div>
      <span class="button-group"> Saved Filters: <span id="savedFilters">[]</span> </span>
    </div>

    <ag-grid-angular
      #agGrid
      style="width: 100%; height: 100%;"
      id="myGrid"
      class="ag-theme-balham"
      [modules]="modules"
      [columnDefs]="columnDefs"
      [defaultColDef]="defaultColDef"
      [rowData]="rowData"
      (gridReady)="onGridReady($event)"
    ></ag-grid-angular>
  `
})
export class AppComponent {
  private gridApi;
  private gridColumnApi;
  public modules: Module[] = AllModules;

  private columnDefs;
  private defaultColDef;
  private rowData: [];

  constructor(private http: HttpClient) {
    this.columnDefs = [
      {
        headerName: "Athlete",
        field: "athlete",
        width: 150,
        filter: "agTextColumnFilter"
      },
      {
        headerName: "Age",
        field: "age",
        width: 90,
        filter: "agNumberColumnFilter"
      },
      {
        headerName: "Country",
        field: "country",
        width: 120
      },
      {
        headerName: "Year",
        field: "year",
        width: 90
      },
      {
        headerName: "Date",
        field: "date",
        width: 145,
        filter: "agDateColumnFilter",
        filterParams: {
          comparator: function(filterLocalDateAtMidnight, cellValue) {
            var dateAsString = cellValue;
            if (dateAsString == null) return -1;
            var dateParts = dateAsString.split("/");
            var cellDate = new Date(Number(dateParts[2]), Number(dateParts[1]) - 1, Number(dateParts[0]));
            if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {
              return 0;
            }
            if (cellDate < filterLocalDateAtMidnight) {
              return -1;
            }
            if (cellDate > filterLocalDateAtMidnight) {
              return 1;
            }
          }
        }
      },
      {
        headerName: "Sport",
        field: "sport",
        width: 110
      },
      {
        headerName: "Gold",
        field: "gold",
        width: 100,
        filter: "agNumberColumnFilter"
      },
      {
        headerName: "Silver",
        field: "silver",
        width: 100,
        filter: "agNumberColumnFilter"
      },
      {
        headerName: "Bronze",
        field: "bronze",
        width: 100,
        filter: "agNumberColumnFilter"
      },
      {
        headerName: "Total",
        field: "total",
        width: 100,
        filter: "agNumberColumnFilter"
      }
    ];
    this.defaultColDef = {
      sortable: true,
      filter: true
    };
  }

  clearFilters() {
    this.gridApi.setFilterModel(null);
    this.gridApi.onFilterChanged();
  }

  saveFilterModel() {
    var savedFilters = "[]";
    window.savedModel = this.gridApi.getFilterModel();
    if (window.savedModel) {
      savedFilters = Object.keys(window.savedModel);
    } else {
      savedFilters = "-none-";
    }
    document.querySelector("#savedFilters").innerHTML = JSON.stringify(savedFilters);
  }

  restoreFilterModel() {
    this.gridApi.setFilterModel(window.savedModel);
    this.gridApi.onFilterChanged();
  }

  restoreFromHardCoded() {
    var hardcodedFilter = {
      country: {
        type: "set",
        values: ["Ireland", "United States"]
      },
      age: {
        type: "lessThan",
        filter: "30"
      },
      athlete: {
        type: "startsWith",
        filter: "Mich"
      },
      date: {
        type: "lessThan",
        dateFrom: "2010-01-01"
      }
    };
    this.gridApi.setFilterModel(hardcodedFilter);
    this.gridApi.onFilterChanged();
  }

  onGridReady(params) {
    this.gridApi = params.api;
    this.gridColumnApi = params.columnApi;

    this.http
      .get("https://raw.githubusercontent.com/ag-grid/ag-grid/master/packages/ag-grid-docs/src/olympicWinners.json")
      .subscribe(data => {
        this.rowData = data;
      });
  }
}