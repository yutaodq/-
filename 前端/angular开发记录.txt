angular 
2020-2-18
1 - 快速过滤器 Quick Filter 
    this.getGridOptions().api.setQuickFilter($event.target.value);


2020-2-14
5 - 学习自定义过滤器 
4 - 修改 text-filter.component.html 文件
3 - ag-grid 加入自定义组件。.
     zyweb\src\main\webapp\app\grid\options\data-grid-options.ts
      export class DataGridOptionsUtil {  }  
2 - DataGridFilterModule 模块文件无问题，模块的组件需要进一步验证。
1 - 解决 DataGridFilterModule 模块导入LfFormsModule  模块 问题
     可直接使用
今天正式上井
2020-2-13 
LfInputDateModule  有问题
4 - LfInputDateModule  可用 
3 - LfInputNumberModule 可用
2 - LfInputsModule  模块
1 - 解决 DataGridFilterModule 模块导入 LfInputsModule  模块 问题

今天办公楼值班，负责检测体温，消毒 上创业城

2020-2-12
7 - export class LfSplitInfoButton extends LfSplitButton
      LfSplitInfoButton.html 有问题明天解决
6 -最小化LfButtonModule 的组件 LfSplitInfoButton 
5 - 提交简版的 DataGridFilterModule

4 - 最小化 AuthorizationUtil  ( 没有解决)
     export class AuthorizationUtil {
3 - 最小化 LfButton
      export class LfButton implements ISecureComponent, AfterViewInit, OnDestroy {
2 - 最小化LfButtonModule
      export class LfButtonModule {}
1 - 最小化 DataGridFilterModule
      export class DataGridFilterModule {}  

2020-2-11
-----------
以后的记录转移到云盘上了

2 -  加入类库 lodash

/src/main/webapp/app/base-ui/util/lang/object.util.ts

const cloneDeep = require('lodash.cloneDeep');

 tyarn add lodash
https://github.com/lodash/lodash

------------
1 - 加入类库 card-validator
export class LfInputCreditCard extends LfCompositeInputComponent<any> implements ControlValueAccessor {
 const cardValidator = require('card-validator');
}

 tyarn add card-validator
https://github.com/braintree/card-validator


2020-2-10

4 - 加入 gird/filter 模块

-----------
3 - 返回2020-2-9 要解决的 this.restoreGridState()
    太复杂没有解决
---------
2 - 完成base-ui文件夹的修改
   这个文件夹是 https://github.com/Manjuanand021/ls_perfect
   life-core 的拷贝
-------
1 - 添加 @telerik/kendo-intl 库

 tyarn add '@telerik/kendo-intl'
 npm install --save '@telerik/kendo-intl'
 https://github.com/telerik/kendo-intl


2020-02- 09
7-  BaseGridViewModel 根文件
export abstract class BaseGridViewModel{
   this.restoreGridState()
}

6 - 准备完善  this.bindGridReady();
    
5 - gird 汉化

4 - 完善 
export abstract class BaseGridViewModel {
    this.setColumnSortOrder();
}    
    
 ------------   
3 - 完善 export class DataGridOptionsUtil

private static needToHandleColumnResize{
   自动调整列宽功能
}

export abstract class BaseGridViewModel {
    // true 显示 checkbox 可以多选
    // false 不显示 checkbox 
    protected showCheckboxColumn(): boolean {
        return true;
    }
}
--------------
2 - 准备完善  this.bindGridReady();
  3 - 修改 export class WarehouseListComponent extends BaseGridViewModel<Warehouse>
  2 - 完成 bindGridReady()
  1 - 导入 zyapp/grid/view-model/grid-state 

-----------
1 - 完善ag-gird GridOptions 属性
   加入defaultColDef

-------------------
2020-2-8

7 - 组件实现了列构建
  export class WarehouseListComponent extends BaseGridViewModel
---------------
6- 完成列构建器 WarehouseGridColumnsBuilder 和 它的基础类

----------------
5 - 新建grid模块 成功运行

-----------
4 - 使用 @ag-grid-community/all-modules
--------
3- 替换原有在core中的i18n模块
---------
2- app/core 创建i18n模块
-----------
1 - 恢复到 2020-2-1 的版本
    2- 新建 AgGridSharedModule 模块


2020-2-7

----------------------
2 - 
即时通地址
http://210.12.209.197/
-----------------------
1 - i18n
   <h1>{{ 'zy.title.long' | translate }}</h1>

import { TranslateService }from "@ngx-translate/core";
constructor(public translateService: TranslateService){

    this.translateService.get('TAB1_TITLE').subscribe((value) => {

        this.table1_text = value;

    })
关于懒加载的Page
如果你的page是懒加载的，一定不要忘了在对应的page.module.ts文件中，import TranslateModule，比如上面的module.ts：

import { TranslateModule }from "@ngx-translate/core";

————————————————


2020-2-5
1- 错误修改
    @ViewChild('form'})
    public form: NgForm;
错误提示：Angular @ViewChild() error: Expected 2 arguments, but got 1

In Angular 8 , ViewChild takes 2 parameters
参考下面的写法即可

    @ViewChild('form', {static: false})
    public form: NgForm;

原因：ViewChild需要两个参数，并没有提供opts

使用此功能时，必须提供静态标志以定义何时需要解析ViewChild和ContentChild实例

static - whether or not to resolve query results before change detection runs (i.e. return static results only). If this option is not provided, the compiler will fall back to its default behavior, which is to use query results to determine the timing of query resolution. If any query results are inside a nested view (e.g. *ngIf), the query will be resolved after change detection runs. Otherwise, it will be resolved before change detection runs.

此段解释在中文文档中并没有被翻译，大体意思如下：

static - 是否在更改检测运行之前解析查询结果(即只返回静态结果)。
如果不提供此选项，编译器将退回到其默认行为，即使用查询结果来确定查询解析的时间。
如果任何查询结果位于嵌套视图中(例如*ngIf)，则在运行更改检测后将解析该查询。
否则，它将在变更检测运行之前被解析。

解决：（按他说的添加参数就行了）

 
  @ViewChild('child',{static:true}) child:any;
 
//或者
 
  @ViewChild('child',{static:false}) child:any;



2020-2-4
npm install angular-split
tyarn add angular-split

1- 视图模型 export abstract class BaseInfiniteGridViewModel<T>
  IInfiniteGridDatasource
  export class CaseLogListGridDataSource extends BaseGridDataSource implements IInfiniteGridDatasource {
  BaseGridDataSource
import { BaseGridDataSource } from 'business/shared/grid/base-grid-data-source';
export abstract class BaseGridDataSource implements IGridDataSource {

2020-2-3
5- 编译错误 
 ERROR  Failed to compile with 1 errors0:
 错误原因：有两个一样名城的模块
    在目录 app\core下建了一个 AppI18nModule
    又在app\zy-core下建了一个 AppI18nModule
    
4 - LsFormatterModule 模块没有完成
D:\应用程序案例\angular\ls_perfect-master\src\lifesuite-app\ls-core\util\formatter\ls-formatter.module.ts

3 -  把I18nModule模块从core模块中分离出来

2 - 学习列构建器 ColumnsBuilder
https://github.com/Manjuanand021/ls_perfect
life-core\component\grid\builder\base-grid-columns.builder.ts

1 - 学习 model
business\policy\case-log\list\case-log-list.component.ts
life-core\component\grid\view-model\base-infinite-grid-view-model.ts
life-core\view-model\view-model.ts


1 - 新建DataGridModule模块
  C:\yutao\zyweb\src\main\webapp\app\zy-core\component\grid

2020-2-2
3- 使用以下库
    "@ag-grid-enterprise/all-modules": "~22.1.0",
    "@ag-grid-community/angular": "~22.1.0",
    要加modules
    <ag-grid-angular
        [modules]="modules"
    >
    
    使用以下库
        "ag-grid-angular": "^22.1.1",
        "ag-grid-community": "^22.1.1",
        "ag-grid-enterprise": "^22.1.1",
    <ag-grid-angular
        不用加 [modules]="modules"
    >

2 - zy-core\component\grid\data-grid.module.ts
ag-gird 二次开发
https://github.com/AdaptableTools/adaptable

https://github.com/AdaptableTools/adaptable/blob/55550c63fde272e708643c9c36ccd6c478c15d54/packages/adaptable-ng-aggrid/projects/adaptable-angular-aggrid/src/lib/aggrid-angular-override.component.ts
    <adaptable-angular-aggrid
      style="width: 100vw; height: 100vh;"
      [adaptableOptions]="adaptableOptions"
      [gridOptions]="gridOptions"
      [modules]="agGridModules"
    >
    
    </adaptable-angular-aggrid>
1 - AgGrid学习案例
https://github.com/Manjuanand021/ls_perfect
  * 主模块 import { AppModule } from './lifesuite-app/app.module';


2020-2-1
2- 新建 AgGridSharedModule 模块

1 - Ag-grid 国际化   使用localeTextFunc
  见： export class WarehouseListComponent implements OnInit {

一矿111队有确诊病历，形式非常严重。
//    "@ag-grid-enterprise/all-modules": "~22.1.0",
//    "@ag-grid-community/angular": "~22.1.0",

        "ag-grid-angular": "^22.1.1",
        "ag-grid-community": "^22.1.1",
        "ag-grid-enterprise": "^22.1.1",


2020-1-31
2 - 学习ag-grid 国际化
https://github.com/GeorgeKnap/profile-web
具体案例如下：
profile-web/src/app/dashboard/cards/realtime-app/realtime-app.component.ts

1 - Ag-grid 国际化   使用localeText


2020-1-30

3 -    gridOptions.api.sizeColumnsToFit();//调整表格大小自适应
    onGridReady: function () { 
        gridOptions.api.sizeColumnsToFit();//调整表格大小自适应
    },
    
2 - ag-grid-angular 直接显示过滤器，如果为false 需要点击列头
    <ag-grid-angular
        #agGrid
        style="width: 100%; height: 500px;"
        class="ag-theme-balham"
        [rowData]="warehouses"
        [columnDefs]="columnDefs"
        [defaultColDef]="defaultColDef"
        [frameworkComponents]="frameworkComponents"
        [getContextMenuItems]="getContextMenuItems"
        rowSelection="multiple"
        [modules]="modules"
        [floatingFilter]="true"  //设置为true直接显示过滤器，如果为false 需要点击列头

    >
    </ag-grid-angular>


9:30 陪大红上班
1 - ag-grid 中文说明
http://www.itxst.com/ag-grid/tutorial.html


2020-1-28
事态严重
2 - angular 变更检测策略
https://blog.tcs-y.com/2019/11/17/angular-change-detection-strategy/

1 - angular 变更检测详解
https://blog.tcs-y.com/2019/11/19/angular-change-detection-explained/

2020-2-24
今天大年三十，下午回创业城，到龙南医院接爸爸
武汉封城

2020-1-21
早上一家三口出门，苗和同学玩，我和大红办年货，晚上李伟请吃火锅。

重点学习案例： https://www.ag-grid.com/angular-markup/


2020-1-20
实现 ag-gird 的 headerComponent 功能

今天下生产，初八上班

2020-1-16

** 学习 ag-grid  自定义 cellRendererFramework
      {headerName: '序号',
        field: 'id',
        width: 120,
        cellRendererFramework: RendererComponent,
        },
1- 创建组件 
export class RendererComponent implements OnInit

2 - 在AgGridModule 注册组件
  AgGridModule.withComponents([RendererComponent]),

3 - 在应用组件中引入RendererComponent
    this.frameworkComponents = {
      rendererComponent: RendererComponent
    };
    
      {headerName: '序号',
        field: 'id',
        width: 120,
        cellRendererFramework: RendererComponent,
        },

4 - 在模板中
    <ag-grid-angular
        #agGrid
    style="width: 500px; height: 500px;"
        class="ag-theme-balham"
        [rowData]="warehouses"
        [columnDefs]="columnDefs"
        [defaultColDef]="defaultColDef"
        [frameworkComponents]="frameworkComponents"
        rowSelection="multiple"
    >
    </ag-grid-angular>
    
    
2020-1-15
1 - handsontable
tyarn add handsontable @handsontable/angular
 
 没有使用

2020-1-14
今天值班，分大米每人一百斤。


2020-1-13
** 学习 ag-grid 案例
  https://github.com/ag-grid/ag-grid-angular-example
  https://github.com/ag-grid/ag-grid-angular-cli-example
苗2020-1-6放假，和大红坐火车到哈接
补资料

2019-12-28
今天周六没上班，在家休息一天。
1- 学习Teradata/covalent库 CovalentSearchModule模块
    D:\documents\case\angular\covalent\src\platform\core\search\search-input
    使用案例：
     D:\documents\case\angular\covalent\src\app\content\components\component-demos\search\demos\search-demo-basic\search-demo-basic.component.ts
    
2019-12-27
单位计算机webstorm可用 

2019-12-23
修车暖风，升级计算机加固态硬盘
2- json-server 不启动


1 - 重新装机后，出现错误


2019-12-22
妈妈打电话说爸爸的学生宋阳要来，让接站。
1 - 加入SearchTitleComponent组件

（三）加入 covalent模块

（二）- 学习 网格框架ag-Grid
   
   tyarn add ag-grid-community ag-grid-angular ag-grid-enterprise


（一） - 案例学习
   https://github.com/lxcancino/sx-contabilidad

  1 - 学习 cuentas.module.ts模块

1- 学习Teradata/covalent库

git: https://github.com/Teradata/covalent
学习文档： https://teradata.github.io/covalent/#/
项目安装： tyarn add @covalent/core
      tyarn add @covalent/http @covalent/highlight @covalent/markdown @covalent/dynamic-forms @covalent/echarts

应用的案例：
https://github.com/lxcancino/lx-mobix

在git上可查找的关键字：
export class SearchBoxComponent

  
2019-12-19

2 - 公共模块 app\shared\shared.module.ts 加入 NgAisModule

1- 根模块 app.module.ts  加入 NgAisModule
import { NgAisModule } from 'angular-instantsearch';
NgAisModule.forRoot()

2019-12-18 
3 - 学习 angular-instantsearch
  tyarn add angular-instantsearch
2- 应用程序搜索功能
https://github.com/algolia/angular-instantsearch

1- 设定页面标题title
   (1 )  \src\app\core\settings\settings.effects.ts
     setTitle = createEffect(
    () =>
      merge(
        this.actions$.pipe(ofType(actionSettingsChangeLanguage)),
        this.router.events.pipe(filter(event => event instanceof ActivationEnd))
      ).pipe(
        tap(() => {
          this.titleService.setTitle(
            this.router.routerState.snapshot.root,
            this.translateService
          );
        })
      ),
    { dispatch: false }
  );
  (2) src\app\features\settings\settings-routing.module.ts
  const routes: Routes = [
  {
    path: '',
    component: SettingsContainerComponent,
    data: { title: 'zy.menu.settings.title' }
  }
];

2019-12-17

1 - 可能是最好的 Rx 初学者教程
https://zhuanlan.zhihu.com/p/25552305

2019-12-16
1- 学习TitleService的使用
   https://github.com/tomastrajan/angular-ngrx-material-starter
2019-12-15
1 - 重构AppComponent组件
  core模块加入 header,footer,sidenav组件
  
2019-12-12
 1 - 程序中<mat-toolbar>工具栏中的菜单中为什么靠右边？
     app.component.html
           <span routerLink="" class="branding spacer d-none d-md-inline">
          	<img [src]="logo" /> {{ 'anms.title.long' | translate}}
          </span>

          <span class="d-none d-md-inline">
            <button mat-button class="nav-button" *ngFor="let item of navigation" [routerLink]="[item.link]"
              routerLinkActive="active">
              {{item.label | translate}}
            </button>
          </span>
   因为
    app.component.scss
      .spacer {
          flex: 1 1 auto;
      }
  flex: 属性是flex-grow, flex-shrink 和 flex-basis的简写
    flex-grow ：属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大
    flex-shrink ：属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小
    flex-basis ：
2019-12-11
   1 - 开如学习响应式布局：参考案例
   https://github.com/tomastrajan/angular-ngrx-material-starter


2019-12-10

2 - 图像的显示宽度不能大于它的包含元素的宽度 《学习响应式设计》P133

img {
  max-width: 100%;
}

1 - 设置默认字体  《学习响应式设计》
   body {
  font-size: 100%;
}
2019-12-9
修改 index.html
1- 加标题
   <title>应用程序在浏览器上显示的标题</title>
2 - 只能index.html使用的css样式
   <head> 
      <style>样式 </style>
   </head>
   ？把样式单独存放到一个文件，在index.html中引用这个文件，
     这个样式只应用于这个文件的方法吗？
    
    这样引用，是把模式应用到了整个应用程序了吧？
    <link rel="stylesheet" href="./content/scss/index-html.scss"/>

2019-12-7
1 - 功能比较完善

2019-12-6
2 - 错误处理
https://github.com/ldex/angular-full-project

1 - HttpErrorHandler 成功实现页面跳转

2019-12-5
3 - PageHeaderComponent 组件

2 - NotFoundModule 模块
    
1- 实现了简单的错误处理：
   （1） - 创建错误处理器
   export class HttpErrorHandler extends ErrorHandler
   （2） - 创建消息管理器
   export class NotificationService {
   （3） - 创建Http拦截器
   export class HttpErrorInterceptor implements HttpInterceptor   

2019-12-4
3 - 学习http 错误处理
2 - addisalemtafere/EIC_Inv_1  错误处理
https://github.com/addisalemtafere/EIC_Inv_1/tree/e730b0fa609ee3887178691016e94d882a9b3c91

1 - 学习http 错误处理
 this.httpClient catchError

2019-11-29
2 - http完整的响应体案例
https://github.com/SkarletKill/MicroservicesFrontend/tree/84c63cfd4ccdeb417b9b3a33c5682f92c6d249dc
1 - 学习 repository
https://github.com/carlosbulado/PerfectMenu/tree/809c0436bc323258b9e50feafc821db4ef9ea567

2019-11-28

2 - export class ConfigModule

1 - 学习 app.config.ts

2019-11-27
2 - 导入HttpClientModule
　　　　在模块级别导入HttpClientModule
　　　　技巧01：直接在主模块中导入即可，但是一般的做法是将一些只导入一次的模块放到一个核心模块中，
        再将核心模块导入到主模块中即可
1 - Http拦截器


2019-11-26
1 - 学习案例
https://github.com/NaOH123321/QQmusic
    return this.http.get<Message>(url, {
        headers: this.headers,
        params,
        observe: 'response'
      })
https://github.com/puku0x/ngrx-todo
https://github.com/puku0x/learn-ngrx

2019-11-25
1 - baseHttpService 可用

2019-11-24
1- constructor( private baseHttpService: BaseHttpService ) {
https://github.com/tinotjgithub/work-assignmet-tool


2019-11-22 

https://github.com/btangQuote2/VmAngular
2 - 学习
BaseHttpAuthService
参考：
https://github.com/hotel7372/hotel-2019

1 - 学习
 export class BaseService
 
 参考：
  https://github.com/oreon/mya2


2019-11-21
2 - loadAll 有参数的例子
https://github.com/NaOH123321/QQmusic/blob/bc2d2afe3755a8d3a5062d82eb66f58d5fc313a7/src/app/store/effects/song.effect.ts
1- 学习https://github.com/psy-man/angular-crud
   export class BaseService
   
2019-11-20
2 - WarehouseListComponent组件的< ngx-datatable>
  加入属性  [loadingIndicator]="loading"

1- 学习https://github.com/psy-man/angular-crud
  ngx-datatable 和 ngrx结合
  https://github.com/exalca/FuseApp
  
2019-11-19 
3 - 使用 ngx-datatable
  
2- jhipster
   https://www.jhipster.tech/cn/
1 - primeng 学习
2019-11-18
学习angular/flex-layout
1 - 案例
   (1) angular-material-login-template
   https://github.com/SinghDigamber/angular-material-login-template 
   
   (2) Ismaestro/angular8-example-app
       https://github.com/Ismaestro/angular8-example-app
   (3) Responsive-Navbar-with-Angular-Material-and-Angular-Flex-Layout
   https://github.com/mainawycliffe/Responsive-Navbar-with-Angular-Material-and-Angular-Flex-Layout

2019-11-17
1- 成功加入angular/flex-layout到core模块中
   对pack.json中的一些包进行了升级
2019-11-16
3- 安装 angular/flex-layout
   (1) 先升级yarn 
   (2) 用yarn 安装不上 angular/flex-layout
  （3）npm install @angular/flex-layout 安装成功
  
2 - 查看node 安装地址
windows下打开命令行工具，输入where node

1 - yarn 升级最新版本

    cnpm install yarn@latest -g
    
    yarn 升级 tyarn

    yarn global add tyarn
    
    tyarn upgrade --latest
 tyarn add @swimlane/ngx-datatable
2019-11-15

总而言之，Oauth2和jwt是完全不同的两种东西，一个是授权认证的框架，
另一种则是认证验证的方式方法（轻量级概念）。OAuth2不像JWT一样是一个严格的标准协议，
因此在实施过程中更容易出错。尽管有很多现有的库，但是每个库的成熟度也不尽相同，
同样很容易引入各种错误。在常用的库中也很容易发现一些安全漏洞。

  2 - 学习使用 primefaces/primeng
      https://github.com/NilavPatel/Ng-Prime
tyarn add  primeng 
tyarn add  primeicons 


  1 - ui
     tyarn add angular/flex-layout 
     npm install @angular/flex-layout
    
     flex-layout 案例
      https://github.com/mainawycliffe/Responsive-Navbar-with-Angular-Material-and-Angular-Flex-Layout


      primefaces/primeng 使用用
      
      Material https://github.com/angular/components
      Bootstrap
2019-11-14
   4 - ngx-datatable
   

   3 - 学习 Flex Layout
   angular/flex-layout
   
   
      https://www.jhipster.tech/cn/#/learn
   2 - WarehouseDetailsContainerComponent
      删除功能不好用，以下代码有问题，不清楚为什么
     this.redirectSub = this.warehousesEffects.destroy$.pipe(
      filter(action => {
        console.log(`在控制台打印:WarehouseDetailsContainerComponent: id==` + action.id);
        return action.id === +this.activatedRoute.snapshot.params.warehouseId;
        }
      )
    ).subscribe(() => {
      this.router.navigate(["/warehouses"]);
    });
     
      
   1- package.json 
     //    "rxjs-compat": "^6.5.3",

2019-11-13
  1- 同源策略与跨域方法简介
     https://www.2cto.com/kf/201802/721929.html
2019-11-12 
  4 - 学习一下这个案例
  https://github.com/jeeteshchattraband/Sample/blob/4dd9353770d1342885c31e9bb170c39d69403d53/GNI-staff-contacts-master/src/app/views/contacts/store/contacts-effects.ts
  3 - 修改export class WarehousesEffects
     no-shadowed-variable": true,
  2 - 修改tslint.json 
     "no-shadowed-variable": false
     create 功能可用
  1 - warehouse new
2019-11-9
  2- 应学习rxjs
  1 - WarehouseDetailsContainerComponent
      按删除后出错
      
2019-11-8
   2 - WarehouseDetailsContainerComponent
   1 - websocket 问题没有解决
   
2019-11-7
   3 - warehouse-list 模拟数据可以使用
   2 - warehouse-list 学习
   1- 加入warehouseModule 可用
2019-11-6
  2 - TSLint: Shadowed name: 'warehouse' (no-shadowed-variable)
    变量命名与上级作用域内重名
  1 - tyarn add ngx-socket-io
2019-11-5
  1 - 加入warehouse.module 仓库模块
  2- 学习官方案例
   https://github.com/avatsaev/angular-contacts-app-example  
  3 - ngx-socket-io
      tyarn add ngx-socket-io

2019-11-4
  3 - about.module 可用
  2 - angular-ngrx-material 
      将旧的auth移动到old目录
  1 - 定义路径别名，要修改两个文件

2019-11-3
  升级 angular 到 8.0
  
2019-10-25

2 - loginPageReducer 和authReducer 可用
1- 能进入login页面

2019-10-24

3- 登录功能 -错
2- 学习认证功能

1- 完成angular-ngrx-material 的框架搭建

2019-10-21
3 - 恢复成angular-ngrx-material-starter项目的初始状态

2 - 把zyweb/src/themes目录，
    移到 zyweb/src/main/webapp/content/scss/themes
1 - 修改了shared模块

2019-10-20

   Material 主题的设置
   学习案例https://github.com/tomastrajan/angular-ngrx-material-starter

1- 加入学习案例中的 目录themes
   coreModule模块
     1-  Material使用md-icon组件显示svg图标
   

2019-10-19
同时启动22 - 2和start监听服务:
   见文件JSON-Server使用说明

新建mock目录，把JSON-Server的数据存放在这
   package.json中：
     "json-server": "json-server --watch mock/db.json --config json-server.json"

2019-10-18
建立模拟 REST API
1- JSON-Server 
   (1) 安装 
       tyarn global add json-server
  （2）配置
       把所有的配置放到一个配置文件中，这个配置文件默认名称为json-server.json


2019-9-13 
1 - 学习store
https://segmentfault.com/a/1190000017566273

2019-9-10 学习forRoot
1- Angular forRoot 与 Services
https://www.imwhite.com.cn/2019/05/understand-angular-forroot/

https://blog.csdn.net/railsbug/article/details/79664916

2 - Angular Module 作用域
https://www.imwhite.com.cn/2019/02/understand-angular-basic-type-scope/


2019-07-13 早上七点做自流平
login 路由可用

2019-07-04
二、 AuthEffects
  1- ofType(AuthActionTypes.LOGIN)
  2- ofType(AuthActionTypes.LOGIN) - ok
一、login.service
    1- UserIdentity 修改完
    2- login.service.ts 修改完
    3- user.actions export class LoginSuccess implements Action
    4- UserApi 出错
       UserApi 和 SDKModels在同一个目录下，
       引用 SDKModels 时使用以下代码：
       import { SDKModels } from './';
       webstorm 没有提示错误，但运行程序出错
    5- 解决问题：引用问题
       import { SDKModels } from './SDKModels';
       
2019-07-03
4- webstorm 平台提示错误：Calls to 'console.info' are not allowed
解决方案:
    在tsling.json中的rules下 添加： "no-console": false。

3- 修改AuthEffects中的 ofType(AuthActionTypes.LONGIN),
   1- 加入AppConfigModule模块
   一、login.service
       1- ADAuthService  没修改完
       2- ADAuthService  修改完
       3- 需要使用 F:\temp\catanie\src\app\shared\sdk\services\custom\User.ts
       4- 完成ADAuthService的引入
       5- UserApi 修改
2- aciton login

1- https://github.com/SciCatProject/catanie
   学习catanie

2019-07-02
4-
START-6  https://github.com/weareopensource/Angular/tree/e2b118cbacb5e93485e795ae390691430981fe42
START-6  不断更新中   https://github.com/SciCatProject/catanie
START-12 https://github.com/ShankarSumanth/angular-keycloak
START-4  https://github.com/senacor/BankingInTheCloud-Fineract
START-14  https://github.com/WeAreOpenSourceProjects/NodeAngular

3- 学习https://github.com/jakipatryk/steeditor中的
   store/auth-store
   对原core有一些完善。
   
   
2- core 模块完成 store

1- auth成为core模块的子模块
  // StoreModule.forRoot(reducers, { metaReducers }),
  StoreModule.forRoot(reducers),
  使用metaReducers 后auteState属性不全？
  
2019-07-01 
1- 一篇比较好的文章
   http://www.xampp.cc/archives/2109
   这个文章的实际案例
   https://github.com/jakipatryk/steeditor
   应用程序中的core/router 就是按以上方法编写的
   
2019-06-30
学习使用Ngrx 使用案例是angular-ngrx-material-starter
一、定义authReducer
1- 定义应用的state
export interface AuthState {
  isAuthenticated: boolean;
}


2- 定义action
import { Action } from '@ngrx/store';

export enum AuthActionTypes {
  LOGIN = '[Auth] Login',
  LOGOUT = '[Auth] Logout'
}

export class ActionAuthLogin implements Action {
  readonly type = AuthActionTypes.LOGIN;
}

export class ActionAuthLogout implements Action {
  readonly type = AuthActionTypes.LOGOUT;
}

export type AuthActions = ActionAuthLogin | ActionAuthLogout;

3- 初始化State
export const initialState: AuthState = {
  isAuthenticated: false
};

4- 定义reducer
export function authReducer(
  state: AuthState = initialState,
  action: AuthActions
): AuthState {
  switch (action.type) {
    case AuthActionTypes.LOGIN:
      return { ...state, isAuthenticated: true };

    case AuthActionTypes.LOGOUT:
      return { ...state, isAuthenticated: false };

    default:
      return state;
  }
}
二、將路由狀態加入 store
   ngrx/store 之路由篇(参考http://www.xampp.cc/archives/2109)
   https://github.com/jakipatryk/steeditor

1- 定义应用的state
   E:\temp\material\src\app\core\router\router.state.ts
import { Params } from '@angular/router';

export interface RouterStateUrl {
  url: string;
  params: Params;
  queryParams: Params;
}

2- 定义action
export const GO = '[router] GO';
export const BACK = '[router] BACK';
export const FORWARD = '[router] FORWARD';

export class Go implements Action {
  readonly type = GO;
  constructor(
    public payload: {
      path: any[];
      query?: Object;
      extras?: NavigationExtras
    }
  ) { }
}
export class Back implements Action {
  readonly type = BACK;
}
export class Forward implements Action {
  readonly type = FORWARD;
}
export type Actions =
  | Go
  | Back
  | Forward;
3- 路由篇 - Reducer

4- Effect
@Injectable()
export class RouterEffects {  }


三、根Store
1- 根State
export interface AppState {
  auth: auth.AuthState;
  router: router.State;
}


2- 根reducers
export const reducers: ActionReducerMap<AppState> = {
  auth: auth.authReducer,
  router: router.reducer
};

  StoreRouterConnectingModule.forRoot(),

@NgModule({
  imports: [
  StoreModule.forRoot(reducers, { metaReducers }),
  
  EffectsModule.forRoot([AuthEffects, RouterEffects]),
  
  StoreRouterConnectingModule.forRoot({
      stateKey: 'router'
    }),
  StoreDevtoolsModule.instrument({
      maxAge: 10,
      logOnly: environment.production
    }),

})

1- 使用redux开发者工具 @ngrx/store-devtools
import { StoreDevtoolsModule } from '@ngrx/store-devtools';
import { environment } from '../environments/environment'; // Angular CLI environment

@NgModule({
  imports: [
    environment.production
      ? []
      : StoreDevtoolsModule.instrument({
          name: 'Angular NgRx Material Starter'
        }),
  ]
})
export class AppModule {}


2019-06-26

1 、 为什么 app.module模块中导入了 BrowserModule
import { BrowserModule } from "@angular/platform-browser";
 在settingModule中还要导入BrowserModule ?
 
2 - E:\temp\material\src\app\core\local-storage\local-storage.service.ts

  static loadInitialState() {
    return Object.keys(localStorage).reduce((state: any, storageKey) => { }
 }
  （1） localStorage : JavaScript 存储对象
      详细见https://www.runoob.com/jsref/obj-storage.html
      Angular——localstorage的使用

   （2） 
2019-06-26
应用程序的初始样式是在什么地方设置的
   在 app.component.html 中
   <div [class]="'theme-wrapper ' + (theme$ | async)">
   </div>
    
2019-06-18
网页标签的设置
D:\yutao\zyweb\src\environments\environment.ts
  appName: '作业-练习',

2019-06-17
实现简单的布局

2019-06-03
学习响应式布局
1- index.html 

<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
这个视口的 <meta> 标签是一种非标准的（但却是事实标准的）方式，它告诉浏览器怎么渲
染网页。在这里， <meta> 标签想表达的意思是：按照设备的宽度（ device-width ）来渲染网
页内容。


2019-05-03
1- vendor.scss
   app.module 导入 vendor.ts
   vendor.ts  导入 vendor.scss

装修房子，自己干了水电，没成功。不行准备重新找人干。

2019-04-05 清明 一家三口去墓地烧纸 
1 - core模块 加入  app\core\animations
    setting 中要用到这个
2- core模块 加入  \app\core\title\title.service.ts
    服务器
3 - 成功加入 setting模块 E:\temp\material\src\app\settings\settings.module.ts
4- 加入 浏览器检测库 BrowserDetect.js
   tyarn add browser-detect

2019-04-04

1 - core模块 加入core\router
2 - core模块 加入 app\core\auth
    F:\temp\material\src\app\core\auth\auth.effects.ts
    出错：提示如下：
     Declaration of instance field not allowed after declaration of instance method. 
     Instead, this should come at the beginning of the class/interface.
    解决方案 ： constructor 构造器要放在所有@Effect方法的后面
    @Injectable()
    export class AuthEffects {
         @Effect({ dispatch: false })
         login = this.actions$.pipe(

        constructor(private actions$: Actions<Action> ) {}
｝
3 - core模块 加入 app\core\local-storage
    class LocalStorageService 有一个静态方法 loadInitialState，所以
    不能写构造方法
    export class LocalStorageService {
        // constructor() {}
        static loadInitialState() { ｝
    ｝
4  core模块 加入 app\core\meta-reducers
5  core模块 加入 app\core\google-analytics
6  core模块 加入 app\core\core.state.ts
7 成功修改src\app\core\core.module.ts

8 出现错误提示： window.ga is not a function
  在文件 \google-analytics.effects.ts 
  解决方案：在 F:\temp\material\src\index.html 加入:
    <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-53234284-5', 'auto');
  </script>
  这个功能是什么？

9- 成功实现 reducer 的替换  

10- app\app.component.ts
11- 21:30 到西站接苗咪 火车22:02到站。大红在让胡路商场

  
2019-04-02

样式文件现在只能使用default-theme

2019-04-01 
今天上井，下午三点多回来的

1 - 手势支持
有些组件（mat-slide-toggle、mat-slider、matTooltip）要依赖 HammerJS 提供手势支持。
为了获得这些组件的全部特性，应用中必须加载 HammerJS。
tyarn add hammerjs

2 -安装完之后，把它导入应用的入口点
 \src\main\webapp\app\polyfills.ts文件中加入:
    import 'hammerjs';
3 - app.component.scss 文件
    @import '../content/scss/styles-variables.scss';

4- 在页面上显示图片
   (1) 组件中使用：
   logo = require('../content/images/logo.png');
   （2）页面中使用
   <img [src]="logo" />
5- 学习自定义主题的资料   
   https://www.cnblogs.com/NeverCtrl-C/p/8099416.html
   
   
2019-03-31
学习 material: 主页能到的组件
https://www.cnblogs.com/starof/p/9074333.html

在环境文件中加入一些信息 environments\environment.ts
使用方法见：https://github.com/tomastrajan/angular-ngrx-material-starter

1- 应用程序的路径别名
   (1)- 修改 tsconfig.json 否则拼写错误
           "paths": {
            "app/*": ["src/main/webapp/app/*"],
            "env/*": ["src/environments/*"]
        },

   (2)- 修改 webpack.common.js
    alias: {
      app: utils.root("src/main/webapp/app/"),
      env: utils.root("src/environments/"),
      ...rxPaths()
    }
   修改完这二个文件后可这样导入
   import {environment as env} from "env/environment";
   
   注意：一定要重新启动服务器
   
   
2- 国际化模块
(1) tyarn add @ngx-translate/core @ngx-translate/http-loader
   参考：文章https://blog.csdn.net/u012125121/article/details/79447614
         项目https://github.com/tomastrajan/angular-ngrx-material-starter
(2) 修改 D:\yutao\zyweb\webpack\webpack.common.js
        new MergeJsonWebpackPlugin({
            output: {
                groupBy: [
                  { pattern: "./src/main/webapp/i18n/zh/*.json", fileName: "./i18n/zh.json" }
                    // fileName: "./i18n/zn.json" 和 new TranslateHttpLoader( http, `./i18n/`,   '.json'  );
                ]
            }
        }),

(3) app.module.ts
import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
@NgModule({
  imports: [
    TranslateModule.forRoot({
      loader: {
        provide: TranslateLoader,
        useFactory: HttpLoaderFactory,
        deps: [HttpClient]
      }
    }),
export class AppModule {
  constructor(private translate: TranslateService) {
    this.initTranslateConfig();
    // this.languageService.changeLanguage(languageKey);
  }
  initTranslateConfig() {
    // 参数类型为数组，数组元素为本地语言json配置文件名
    this.translate.addLangs(["zh"]);
    // 设置默认语言
    this.translate.setDefaultLang("zh");
    // 检索指定的翻译语言，返回Observable
  }

}

export function HttpLoaderFactory(http: HttpClient) {
  return new TranslateHttpLoader( http, `./i18n/`,   '.json'  );
}


2019-3-30

1- 加入headerModule 模块

2- 准备放弃使用nebular布局框架
3- 使用material 学习
   https://github.com/tomastrajan/angular-ngrx-material-starter

4 -加入组件
  （1）tyarn add @angular/material hammerjs

5- 加入样式文件  
   \material\src\themes下的 default-theme.scss  black-theme.scss light-theme.scss
       nature-theme.scss 
   拷贝到zyweb\src\main\webapp\content\scss 下

6- 创建ThemeMaterialModule模块

7- D:\yutao\zyweb\src\main\webapp\content\scss\vendor.scss
    @include angular-material-theme($anms-nature-theme);
8- D:\yutao\zyweb\src\main\webapp\app\vendor.ts
      import "../content/scss/vendor.scss";

2019-03-29
1- 加入D:\yutao\work\zyweb\src\main\webapp\content\scss\vendor.scss
   编译提示错误
   怀疑：项目初始是css 现在使用scss,所以出错
   解决方案：D:\yutao\work\zyweb\webpack\webpack.dev.js
         {
        test: /\.scss$/,
        loaders: ['to-string-loader', 'css-loader', 'sass-loader'],
        exclude: /(vendor\.scss|global\.scss)/
      },
      {
        test: /(vendor\.scss|global\.scss)/,
        loaders: ['style-loader', 'css-loader', 'postcss-loader', 'sass-loader']
      },

2 - ngx-datatable包含了由Angular提供支持的所有类型的表格
    (1) tyarn add @swimlane/ngx-datatable
    
   (2) D:\yutao\work\zyweb\src\main\webapp\content\scss\vendor.scss
 /*
*加入ngx-datatable样式
 */
@import "~@swimlane/ngx-datatable/release/index.css";
@import "~@swimlane/ngx-datatable/release/themes/material.css";
@import "~@swimlane/ngx-datatable/release/assets/icons.css";

3- 清理根模块的引入块，放到shared模块里


4 - 完成 navigation.module.ts 

2019-3-28 

1- 下载模版代码
https://github.com/jhipster/jhipster-sample-app

2 - 添加库
tyarn add @angular/http

tyarn add @ngrx/effects @ngrx/entity @ngrx/router-store @ngrx/schematics
     @ngrx/router-store @ngrx/store @ngrx/store-devtools ngrx-store-freeze

tyarn add @nebular/bootstrap @nebular/theme @angular/animations @angular/cdk nebular-icons

tyarn add @ng-dynamic-forms/core @ng-dynamic-forms/ui-ng-bootstrap angular2-text-mask

3- 修改 angular.json 定义组件和的前缀

   (1) tslint.json 
        "directive-selector": [true, "attribute", "zy", "camelCase"],
        "component-selector": [true, "element", "zy", "kebab-case"],
   (2) angularn.json
       "schematics": {
        "@schematics/angular:component": {
            "prefix": "zy",
            "styleExt": "scss"
        },
        "@schematics/angular:directive": {
            "spec": false,
            "prefix": "zy"
        },
        
4- 样式文件 scss

   D:\yutao\work\zyweb\src\main\webapp\content\scss\vendor.scss
   D:\yutao\work\zyweb\src\main\webapp\app\vendor.ts
   
5 - 怎么解决 TSLint: " should be ' (quotemark) 报错问题
D:\yutao\work\zyweb\tslint.json
        "quotemark": [
            false,
            "single",
            "avoid-escape"
        ],

quotemark规定了引用符号的格式，比如在true,'single'的模式下，就会强制规定引用时必须使用单引号。
然而，即使是WebStorm默认的引用格式也是双引号，这样就必须修改IDE的引用格式，或者将这个规则禁用，
否则每次引用都要手动将双引号改为单引号。